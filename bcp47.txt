-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Language tags as specified by BCP 47
--   
--   <i>Language tags for use in cases where it is desirable to indicate
--   the</i> <i>language used in an information object.</i>
--   
--   <i> - </i><a>https://tools.ietf.org/html/bcp47</a>
--   
--   This package exposes a language tag data type <a>BCP47</a> and a
--   <a>Trie</a> data structure for collecting and querying information
--   that varies based on language tag.
--   
--   <pre>
--   import Data.BCP47 (en, enGB, es)
--   import Data.BCP47.Trie (Trie, fromList, lookup)
--   
--   color :: Trie Text
--   color = fromList [(en, "color"), (es, "colour")]
--   
--   main = do
--     print $ match en color -- Just "color"
--     print $ match enGB color -- Nothing
--     print $ lookup enGB color -- Just "color"
--   </pre>
@package bcp47
@version 0.1.0.0

module Data.BCP47.Internal.Arbitrary

-- | Random generation and shrinking of values.
--   
--   QuickCheck provides <tt>Arbitrary</tt> instances for most types in
--   <tt>base</tt>, except those which incur extra dependencies. For a
--   wider range of <tt>Arbitrary</tt> instances see the
--   <a>quickcheck-instances</a> package.
class Arbitrary a

-- | A generator for values of the given type.
--   
--   It is worth spending time thinking about what sort of test data you
--   want - good generators are often the difference between finding bugs
--   and not finding them. You can use <a>sample</a>, <tt>label</tt> and
--   <tt>classify</tt> to check the quality of your test data.
--   
--   There is no generic <tt>arbitrary</tt> implementation included because
--   we don't know how to make a high-quality one. If you want one,
--   consider using the <a>testing-feat</a> or <a>generic-random</a>
--   packages.
--   
--   The <a>QuickCheck manual</a> goes into detail on how to write good
--   generators. Make sure to look at it, especially if your type is
--   recursive!
arbitrary :: Arbitrary a => Gen a
alphaString :: Int -> Gen String
alphaNumString :: Int -> Gen String
alphaChar :: Gen Char
numChar :: Gen Char

-- | Generates one of the given values. The input list must be non-empty.
elements :: () => [a] -> Gen a

-- | Generates a random element in the given inclusive range.
choose :: Random a => (a, a) -> Gen a

-- | Randomly uses one of the given generators. The input list must be
--   non-empty.
oneof :: () => [Gen a] -> Gen a

-- | Generates a value that satisfies a predicate.
suchThat :: () => Gen a -> (a -> Bool) -> Gen a

-- | Generates a list of random length. The maximum length depends on the
--   size parameter.
listOf :: () => Gen a -> Gen [a]

-- | Generates a list of the given length.
vectorOf :: () => Int -> Gen a -> Gen [a]

module Data.BCP47.Internal.Parser

-- | Ensure a subtag extends to the next <a>-</a> or end of input
--   
--   Used for subtags that can match some prefix of another subtag. For
--   example, a <tt><tt>Script</tt></tt> or <tt><tt>Region</tt></tt> can
--   accidentally be parsed from the prefix of a <tt><tt>Variant</tt></tt>
--   
--   The alternative would be to use <tt><tt>notFollowedBy</tt></tt> with
--   knowledge of the legal characters in the next valid subtag.
complete :: Parsec Void Text a -> Parsec Void Text a

module Data.BCP47.Internal.LanguageExtension

-- | Extended language subtags
--   
--   These are used to identify certain specially selected languages that,
--   for various historical and compatibility reasons, are closely
--   identified with or tagged using an existing primary language subtag.
newtype LanguageExtension
LanguageExtension :: Text -> LanguageExtension

-- | Parse a <a>LanguageExtension</a> subtag from <a>Text</a>
languageExtensionFromText :: Text -> Either Text LanguageExtension
languageExtensionToText :: LanguageExtension -> Text

-- | BCP-47 language extension parser
--   
--   This only implements the ISO 639 portion of the ISO.
--   
--   @<tt> extlang = 3ALPHA ; selected ISO 639 codes *2("-" 3ALPHA) ;
--   permanently reserved </tt>@
languageExtensionP :: Parsec Void Text LanguageExtension
instance GHC.Classes.Ord Data.BCP47.Internal.LanguageExtension.LanguageExtension
instance GHC.Classes.Eq Data.BCP47.Internal.LanguageExtension.LanguageExtension
instance GHC.Show.Show Data.BCP47.Internal.LanguageExtension.LanguageExtension
instance Test.QuickCheck.Arbitrary.Arbitrary Data.BCP47.Internal.LanguageExtension.LanguageExtension

module Data.BCP47.Internal.Language
data ISO639_1

-- | Parse a language subtag from <a>Text</a>
languageFromText :: Text -> Either Text ISO639_1
languageToText :: ISO639_1 -> Text

-- | BCP-47 language parser
--   
--   This only implements the ISO 639 portion of the grammar.
--   
--   @<tt> language = 2*3ALPHA ; shortest ISO 639 code ["-" extlang] ;
--   sometimes followed by ; extended language subtags / 4ALPHA ; or
--   reserved for future use / 5*8ALPHA ; or registered language subtag
--   </tt>@
languageP :: Parsec Void Text ISO639_1

module Data.BCP47.Internal.Extension

-- | Extension subtags
--   
--   Extensions provide a mechanism for extending language tags for use in
--   various applications. They are intended to identify information that
--   is commonly used in association with languages or language tags but
--   that is not part of language identification.
newtype Extension
Extension :: Text -> Extension

-- | Parse an <a>Extension</a> subtag from <a>Text</a>
extensionFromText :: Text -> Either Text Extension
extensionToText :: Extension -> Text

-- | BCP-47 extension parser
--   
--   @@ extension = singleton 1*("-" (2*8alphanum)) ; Single alphanumerics
--   ; "x" reserved for private use
--   
--   singleton = DIGIT ; 0 - 9 / %x41-57 ; A - W / %x59-5A ; Y - Z /
--   %x61-77 ; a - w / %x79-7A ; y - z @@
extensionP :: Parsec Void Text Extension
instance GHC.Classes.Ord Data.BCP47.Internal.Extension.Extension
instance GHC.Classes.Eq Data.BCP47.Internal.Extension.Extension
instance GHC.Show.Show Data.BCP47.Internal.Extension.Extension
instance Test.QuickCheck.Arbitrary.Arbitrary Data.BCP47.Internal.Extension.Extension

module Data.BCP47.Internal.PrivateUse

-- | Private Use subtags
--   
--   Private use subtags are used to indicate distinctions in language that
--   are important in a given context by private agreement.
newtype PrivateUse
PrivateUse :: Text -> PrivateUse

-- | Parse a <a>PrivateUse</a> subtag from <a>Text</a>
privateUseFromText :: Text -> Either Text (Set PrivateUse)
privateUseToText :: PrivateUse -> Text

-- | BCP-47 private use parser
--   
--   @<tt> privateuse = "x" 1*("-" (1*8alphanum)) </tt>@
privateUseP :: Parsec Void Text (Set PrivateUse)
instance GHC.Classes.Ord Data.BCP47.Internal.PrivateUse.PrivateUse
instance GHC.Classes.Eq Data.BCP47.Internal.PrivateUse.PrivateUse
instance GHC.Show.Show Data.BCP47.Internal.PrivateUse.PrivateUse
instance Test.QuickCheck.Arbitrary.Arbitrary Data.BCP47.Internal.PrivateUse.PrivateUse

module Data.BCP47.Internal.Region

-- | A country recognized by ISO 3166.
data Country
regionToText :: Country -> Text

-- | Parse a region subtag from <a>Text</a>
--   
--   <pre>
--   &gt;&gt;&gt; regionFromText $ pack "ZW"
--   Right zimbabwe
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; regionFromText $ pack "012"
--   Right algeria
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; regionFromText $ pack "asdf"
--   Left "regionFromText:1:1:\n  |\n1 | asdf\n  | ^\nunexpected 'a'\nexpecting 2 or 3 character country code\n"
--   </pre>
regionFromText :: Text -> Either Text Country

-- | BCP-47 region parser
--   
--   @<tt> region = 2ALPHA ; ISO 3166-1 code / 3DIGIT ; UN M.49 code </tt>@
regionP :: Parsec Void Text Country

module Data.BCP47.Internal.Script

-- | Script subtags
--   
--   Script subtags are used to indicate the script or writing system
--   variations that distinguish the written forms of a language or its
--   dialects.
newtype Script
Script :: Text -> Script

-- | Parse a <a>Script</a> subtag from <a>Text</a>
scriptFromText :: Text -> Either Text Script
scriptToText :: Script -> Text

-- | BCP-47 script parser
--   
--   @<tt> script = 4ALPHA ; ISO 15924 code </tt>@
scriptP :: Parsec Void Text Script
instance GHC.Classes.Ord Data.BCP47.Internal.Script.Script
instance GHC.Classes.Eq Data.BCP47.Internal.Script.Script
instance GHC.Show.Show Data.BCP47.Internal.Script.Script
instance Test.QuickCheck.Arbitrary.Arbitrary Data.BCP47.Internal.Script.Script

module Data.BCP47.Internal.Variant

-- | Variant subtags
--   
--   Variant subtags are used to indicate additional, well-recognized
--   variations that define a language or its dialects that are not covered
--   by other available subtags.
newtype Variant
Variant :: Text -> Variant

-- | Parse a <a>Variant</a> subtag from <a>Text</a>
variantFromText :: Text -> Either Text Variant
variantToText :: Variant -> Text

-- | BCP-47 variant parser
--   
--   @<tt> variant = 5*8alphanum ; registered variants / (DIGIT 3alphanum)
--   </tt>@
variantP :: Parsec Void Text Variant
instance GHC.Classes.Ord Data.BCP47.Internal.Variant.Variant
instance GHC.Classes.Eq Data.BCP47.Internal.Variant.Variant
instance GHC.Show.Show Data.BCP47.Internal.Variant.Variant
instance Test.QuickCheck.Arbitrary.Arbitrary Data.BCP47.Internal.Variant.Variant

module Data.BCP47.Internal.Subtags
data Subtags
SpecifyLanguageExtension :: LanguageExtension -> Subtags
SpecifyScript :: Script -> Subtags
SpecifyRegion :: Country -> Subtags
SpecifyVariant :: Variant -> Subtags
SpecifyExtension :: Extension -> Subtags
SpecifyPrivateUse :: PrivateUse -> Subtags
instance GHC.Generics.Generic Data.BCP47.Internal.Subtags.Subtags
instance GHC.Classes.Ord Data.BCP47.Internal.Subtags.Subtags
instance GHC.Classes.Eq Data.BCP47.Internal.Subtags.Subtags
instance GHC.Show.Show Data.BCP47.Internal.Subtags.Subtags
instance Test.QuickCheck.Arbitrary.Arbitrary Data.BCP47.Internal.Subtags.Subtags


-- | <i>Human beings on our planet have, past and present, used a number
--   of</i> <i>languages. There are many reasons why one would want to
--   identify the</i> <i>language used when presenting or requesting
--   information.</i>
--   
--   <i>The language of an information item or a user's language
--   preferences often</i> <i>need to be identified so that appropriate
--   processing can be applied. For</i> <i>example, the user's language
--   preferences in a Web browser can be used to</i> <i>select Web pages
--   appropriately. Language information can also be used to</i> <i>select
--   among tools (such as dictionaries) to assist in the processing or</i>
--   <i>understanding of content in different languages. Knowledge about
--   the</i> <i>particular language used by some piece of information
--   content might be useful</i> <i>or even required by some types of
--   processing, for example, spell-checking,</i> <i>computer-synthesized
--   speech, Braille transcription, or high-quality print</i>
--   <i>renderings.</i>
--   
--   <i> - </i><a>https://tools.ietf.org/html/bcp47</a>
module Data.BCP47

-- | A language tag
--   
--   Language tags are used to help identify languages, whether spoken,
--   written, signed, or otherwise signaled, for the purpose of
--   communication. This includes constructed and artificial languages but
--   excludes languages not intended primarily for human communication,
--   such as programming languages.
data BCP47

-- | Produce a list of <tt>(&lt;= priority)</tt> language tags
--   
--   <pre>
--   &gt;&gt;&gt; inits enGBTJP
--   [en,en-GB,en-GB-t-jp]
--   </pre>
inits :: BCP47 -> [BCP47]

-- | Construct a simple language tag
mkLanguage :: ISO639_1 -> BCP47

-- | Construct a localized tag
mkLocalized :: ISO639_1 -> Country -> BCP47

-- | Parse a language tag from text
--   
--   <pre>
--   &gt;&gt;&gt; fromText $ pack "en"
--   Right en
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fromText $ pack "de-CH"
--   Right de-CH
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fromText $ pack "ru-USR"
--   Left "fromText:1:3:\n  |\n1 | ru-USR\n  |   ^\nunexpected '-'\n"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fromText $ pack "en-a-ccc-v-qqq-a-bbb"
--   Right en-a-bbb-a-ccc-v-qqq
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fromText $ pack "de-Latn-DE"
--   Right de-Latn-DE
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fromText $ pack "de-Latf-DE"
--   Right de-Latf-DE
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fromText $ pack "de-CH-1996"
--   Right de-CH-1996
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fromText $ pack "de-Deva"
--   Right de-Deva
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fromText $ pack "zh-Hant-CN-x-private1-private2"
--   Right zh-Hant-CN-x-private1-private2
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fromText $ pack "zh-Hant-CN-x-private1"
--   Right zh-Hant-CN-x-private1
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fromText $ pack "zh-Hant-CN"
--   Right zh-Hant-CN
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fromText $ pack "zh-Hant"
--   Right zh-Hant
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fromText $ pack "zh"
--   Right zh
--   </pre>
fromText :: Text -> Either Text BCP47

-- | Serialize <tt><a>BCP47</a></tt> to <tt><a>Text</a></tt>
--   
--   Subtags are serialized in the order described in the BCP 47
--   specification. Private-use subtags only appear at the end prefixed
--   with an x.
toText :: BCP47 -> Text

-- | Convert tag to list of subtags
toSubtags :: BCP47 -> [Subtags]
data ISO639_1

-- | The language subtag
language :: BCP47 -> ISO639_1
languageToText :: ISO639_1 -> Text

-- | Parse a language subtag from <a>Text</a>
languageFromText :: Text -> Either Text ISO639_1

-- | Extended language subtags
--   
--   These are used to identify certain specially selected languages that,
--   for various historical and compatibility reasons, are closely
--   identified with or tagged using an existing primary language subtag.
data LanguageExtension

-- | Look up all language extension subtags
extendedLanguageSubtags :: BCP47 -> Set LanguageExtension
languageExtensionToText :: LanguageExtension -> Text

-- | Parse a <a>LanguageExtension</a> subtag from <a>Text</a>
languageExtensionFromText :: Text -> Either Text LanguageExtension

-- | Script subtags
--   
--   Script subtags are used to indicate the script or writing system
--   variations that distinguish the written forms of a language or its
--   dialects.
data Script

-- | Look up the script subtag
script :: BCP47 -> Maybe Script
scriptToText :: Script -> Text

-- | Parse a <a>Script</a> subtag from <a>Text</a>
scriptFromText :: Text -> Either Text Script

-- | A country recognized by ISO 3166.
data Country

-- | Look up the region subtag
region :: BCP47 -> Maybe Country
regionToText :: Country -> Text

-- | Parse a region subtag from <a>Text</a>
--   
--   <pre>
--   &gt;&gt;&gt; regionFromText $ pack "ZW"
--   Right zimbabwe
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; regionFromText $ pack "012"
--   Right algeria
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; regionFromText $ pack "asdf"
--   Left "regionFromText:1:1:\n  |\n1 | asdf\n  | ^\nunexpected 'a'\nexpecting 2 or 3 character country code\n"
--   </pre>
regionFromText :: Text -> Either Text Country

-- | Variant subtags
--   
--   Variant subtags are used to indicate additional, well-recognized
--   variations that define a language or its dialects that are not covered
--   by other available subtags.
data Variant

-- | Look up all variant subtags
variants :: BCP47 -> Set Variant
variantToText :: Variant -> Text

-- | Parse a <a>Variant</a> subtag from <a>Text</a>
variantFromText :: Text -> Either Text Variant

-- | Extension subtags
--   
--   Extensions provide a mechanism for extending language tags for use in
--   various applications. They are intended to identify information that
--   is commonly used in association with languages or language tags but
--   that is not part of language identification.
data Extension

-- | Look up all extension subtags
extensions :: BCP47 -> Set Extension
extensionToText :: Extension -> Text

-- | Parse an <a>Extension</a> subtag from <a>Text</a>
extensionFromText :: Text -> Either Text Extension

-- | Private Use subtags
--   
--   Private use subtags are used to indicate distinctions in language that
--   are important in a given context by private agreement.
data PrivateUse

-- | Look up all private use subtags
privateUse :: BCP47 -> Set PrivateUse
privateUseToText :: PrivateUse -> Text

-- | Parse a <a>PrivateUse</a> subtag from <a>Text</a>
privateUseFromText :: Text -> Either Text (Set PrivateUse)

-- | English
en :: BCP47

-- | Spanish
es :: BCP47

-- | British English
enGB :: BCP47

-- | American English
enUS :: BCP47

-- | A nonsense tag <tt>en-t-jp</tt>
enTJP :: BCP47

-- | A nonsense tag <tt>en-GB-t-jp</tt>
enGBTJP :: BCP47
instance GHC.Classes.Ord Data.BCP47.BCP47
instance GHC.Classes.Eq Data.BCP47.BCP47
instance Test.QuickCheck.Arbitrary.Arbitrary Data.BCP47.BCP47
instance GHC.Show.Show Data.BCP47.BCP47
instance GHC.Read.Read Data.BCP47.BCP47

module Data.BCP47.Trie.Internal

-- | A trie mapping <a>BCP47</a> tags to values
newtype Trie a
Trie :: Map ISO639_1 (Trie2 a) -> Trie a
[unLanguage] :: Trie a -> Map ISO639_1 (Trie2 a)

-- | Construct a <a>Trie</a> from a list of tag/value pairs.
fromList :: [(BCP47, a)] -> Trie a

-- | Construct a <a>Trie</a> from a single tag/value pair.
singleton :: BCP47 -> a -> Trie a

-- | A left-biased union of two <a>Trie</a> structures. The left value is
--   prefered when duplicate tags are found.
union :: Trie a -> Trie a -> Trie a

-- | <a>union</a> with a combining function.
unionWith :: (a -> a -> a) -> Trie a -> Trie a -> Trie a
unionUsing :: (Maybe a -> Maybe a -> Maybe a) -> Trie a -> Trie a -> Trie a
data Trie2 a
Trie2 :: Maybe a -> Map Subtags (Trie2 a) -> Trie2 a
data Subtags
SpecifyLanguageExtension :: LanguageExtension -> Subtags
SpecifyScript :: Script -> Subtags
SpecifyRegion :: Country -> Subtags
SpecifyVariant :: Variant -> Subtags
SpecifyExtension :: Extension -> Subtags
SpecifyPrivateUse :: PrivateUse -> Subtags
singleton2 :: BCP47 -> a -> Trie2 a
lookup2 :: BCP47 -> Trie2 a -> Maybe a
match2 :: BCP47 -> Trie2 a -> Maybe a
union2 :: Trie2 a -> Trie2 a -> Trie2 a
union2Using :: (Maybe a -> Maybe a -> Maybe a) -> Trie2 a -> Trie2 a -> Trie2 a
fromSubtags :: [Subtags] -> a -> Trie2 a
instance Data.Traversable.Traversable Data.BCP47.Trie.Internal.Trie
instance Data.Foldable.Foldable Data.BCP47.Trie.Internal.Trie
instance GHC.Base.Functor Data.BCP47.Trie.Internal.Trie
instance GHC.Classes.Ord a => GHC.Classes.Ord (Data.BCP47.Trie.Internal.Trie a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Data.BCP47.Trie.Internal.Trie a)
instance GHC.Show.Show a => GHC.Show.Show (Data.BCP47.Trie.Internal.Trie a)
instance Data.Traversable.Traversable Data.BCP47.Trie.Internal.Trie2
instance Data.Foldable.Foldable Data.BCP47.Trie.Internal.Trie2
instance GHC.Base.Functor Data.BCP47.Trie.Internal.Trie2
instance GHC.Classes.Ord a => GHC.Classes.Ord (Data.BCP47.Trie.Internal.Trie2 a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Data.BCP47.Trie.Internal.Trie2 a)
instance GHC.Show.Show a => GHC.Show.Show (Data.BCP47.Trie.Internal.Trie2 a)
instance GHC.Base.Semigroup a => GHC.Base.Semigroup (Data.BCP47.Trie.Internal.Trie a)
instance GHC.Base.Semigroup a => GHC.Base.Monoid (Data.BCP47.Trie.Internal.Trie a)
instance Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.Arbitrary (Data.BCP47.Trie.Internal.Trie a)
instance GHC.Base.Semigroup a => GHC.Base.Semigroup (Data.BCP47.Trie.Internal.Trie2 a)
instance GHC.Base.Monoid a => GHC.Base.Monoid (Data.BCP47.Trie.Internal.Trie2 a)


-- | A trie like data structure for defining maps from <a>BCP47</a> tags to
--   values.
--   
--   This structure supports collection and lookup of language tagged
--   values. Its semantics are based on those defined in the BCP 47
--   specification.
module Data.BCP47.Trie

-- | A trie mapping <a>BCP47</a> tags to values
data Trie a

-- | Construct a <a>Trie</a> from a list of tag/value pairs.
fromList :: [(BCP47, a)] -> Trie a

-- | Construct a <a>Trie</a> from a single tag/value pair.
singleton :: BCP47 -> a -> Trie a

-- | Lookup the most relevant item for a tag
lookup :: BCP47 -> Trie a -> Maybe a

-- | Lookup an exact match for a tag
match :: BCP47 -> Trie a -> Maybe a

-- | Check if a tag exists in the <a>Trie</a>
elem :: BCP47 -> Trie a -> Bool

-- | A left-biased union of two <a>Trie</a> structures. The left value is
--   prefered when duplicate tags are found.
union :: Trie a -> Trie a -> Trie a

-- | <a>union</a> with a combining function.
unionWith :: (a -> a -> a) -> Trie a -> Trie a -> Trie a

-- | Check if a <a>Trie</a> is empty
null :: Trie a -> Bool
